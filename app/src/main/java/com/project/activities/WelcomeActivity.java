package com.project.activities;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.net.ConnectivityManager;
import android.os.Bundle;
import android.os.Handler;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;

import com.github.mikephil.charting.charts.PieChart;
import com.github.mikephil.charting.components.Legend;
import com.github.mikephil.charting.data.PieData;
import com.github.mikephil.charting.data.PieDataSet;
import com.github.mikephil.charting.data.PieEntry;
import com.project.R;
import com.project.adapters.VulnerabilityListAdapter;
import com.project.domain.Vulnerability;
import com.project.utils.HttpRequestAddVulnerability;
import com.project.utils.HttpRequestEmptyVulnerabilities;
import com.project.utils.HttpRequestVulnerabilityList;

import java.util.ArrayList;
import java.util.concurrent.ExecutionException;

public class WelcomeActivity extends AppCompatActivity {
    private static final String USERNAME_PARAMETER = "username";
    public static final String LIST_PARAMETER = "list";
    private TextView textViewWelcome;
    private String username;
    private ArrayList<Vulnerability> vulnerabilities = new ArrayList<>();

    private final int[] countY = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_welcome);
        setTitle(R.string.welcome);

        textViewWelcome = findViewById(R.id.textViewWelcome);
        Button buttonLogout = findViewById(R.id.buttonLogout);
        buttonLogout.setOnClickListener(v -> {
            Intent intent = new Intent(WelcomeActivity.this, MainActivity.class);
            startActivity(intent);
        });

        Button buttonChangeProfile = findViewById(R.id.buttonChangeProfile);
        buttonChangeProfile.setOnClickListener(v -> {
            Intent intent = new Intent(WelcomeActivity.this, ProfileActivity.class);
            intent.putExtra(LIST_PARAMETER, vulnerabilities);
            intent.putExtra(USERNAME_PARAMETER, username);
            startActivity(intent);
        });

        loadData();

        try {
            ListView listViewVulnerabilities = (ListView) findViewById(R.id.listViewVulnerabilities);
            listViewVulnerabilities.setAdapter(new VulnerabilityListAdapter(vulnerabilities, getApplicationContext()));

            PieChart pieChart = (PieChart) findViewById(R.id.idPieChart);
            pieChart.setRotationEnabled(true);
            pieChart.setHoleRadius(20f);
            pieChart.setTransparentCircleAlpha(0);
            pieChart.setCenterText("Severities by count");
            pieChart.setCenterTextSize(10);

            ArrayList<PieEntry> y = new ArrayList<>();
            for (int i = 0; i < countY.length; i++) {
                y.add(new PieEntry(countY[i], i));
            }
            PieDataSet pieDataSet = new PieDataSet(y, "Severities by count");
            pieDataSet.setSliceSpace(2);
            pieDataSet.setValueTextSize(12);

            ArrayList<Integer> colors = new ArrayList<>();
            colors.add(Color.BLUE);
            colors.add(Color.RED);
            colors.add(Color.YELLOW);
            colors.add(Color.GREEN);
            colors.add(Color.CYAN);
            colors.add(Color.MAGENTA);
            colors.add(Color.GRAY);
            colors.add(Color.LTGRAY);
            colors.add(Color.BLACK);

            pieDataSet.setColors(colors);

            Legend legend = pieChart.getLegend();
            legend.setForm(Legend.LegendForm.CIRCLE);
            legend.setPosition(Legend.LegendPosition.LEFT_OF_CHART);

            PieData pieData = new PieData(pieDataSet);
            pieChart.setData(pieData);
            pieChart.invalidate();

            Button buttonAdd = (Button) findViewById(R.id.buttonAdd);
            buttonAdd.setOnClickListener(v -> {
                Intent intent = new Intent(WelcomeActivity.this, AddActivity.class);
                intent.putExtra(LIST_PARAMETER, vulnerabilities);
                intent.putExtra(USERNAME_PARAMETER, username);
                startActivity(intent);
            });
        } catch (Exception e) {
            AlertDialog.Builder builder = new AlertDialog.Builder(getApplicationContext());
            builder.setMessage(e.getMessage());
            builder.create().show();
        }

        final Handler handler = new Handler();
        handler.post(new Runnable() {
            @Override
            public void run() {
                try {
                    Log.d("", "in Handler");
                    if (isInternetConnected()) {
                        syncContent();
                        Log.d("", "in Handler - SYNC DONE");
                    }
                } finally {
                    handler.postDelayed(this, 6000);
                }
            }
        });
    }

    private void loadData() {
        Intent intent = getIntent();
        username = intent.getStringExtra(USERNAME_PARAMETER);
        textViewWelcome.setText(String.format("%s%s", getString(R.string.welcome), username));

        ArrayList<Vulnerability> listFromIntent = (ArrayList<Vulnerability>) intent.getSerializableExtra(LIST_PARAMETER);
        try {
            if (listFromIntent == null) {
                vulnerabilities = new HttpRequestVulnerabilityList().execute().get();
            } else {
                vulnerabilities = listFromIntent;
            }
        } catch (Exception e) {
            AlertDialog.Builder builder = new AlertDialog.Builder(getApplicationContext());
            builder.setMessage(e.getMessage());
            builder.create().show();
        }
        for (int i = 0; i < 9; i++) {
            countY[i] = 0;
        }
        for (Vulnerability vulnerability : vulnerabilities) {
            countY[vulnerability.getSeverity()]++;
        }
    }

    private void syncContent() {
        try {
            new HttpRequestEmptyVulnerabilities().execute().get();
        } catch (ExecutionException | InterruptedException e) {
            e.printStackTrace();
        }

        for (Vulnerability vulnerability : vulnerabilities) {
            boolean result = false;
            try {
                result = new HttpRequestAddVulnerability().execute(vulnerability).get();
            } catch (ExecutionException | InterruptedException e) {
                e.printStackTrace();
            }
            if (!result) {
                AlertDialog.Builder builder = new AlertDialog.Builder(getApplicationContext());
                builder.setMessage(getString(R.string.error));
                builder.create().show();
            }
        }
    }

    private boolean isInternetConnected() {
        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        return cm.getActiveNetworkInfo() != null;
    }
}
