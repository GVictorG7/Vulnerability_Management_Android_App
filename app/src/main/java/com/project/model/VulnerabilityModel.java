package com.project.model;

import com.project.domain.Vulnerability;

import org.json.JSONObject;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class VulnerabilityModel {
    private static final String BASE_URL = "http://192.168.43.65:3000/api/vulnerability/";
    private RestTemplate restTemplate = new RestTemplate();

    public Void empty(String username, String token) {
        try {
            MultiValueMap<String, String> values = new LinkedMultiValueMap<>();
            values.add("username", username);
            values.add("token", token);

            HttpEntity<?> httpEntity = new HttpEntity<Object>(values);

//            JSONObject jsonObject = new JSONObject(values);
//            HttpHeaders headers = new HttpHeaders();
//            headers.setContentType(MediaType.APPLICATION_JSON);
//            HttpEntity<String> entity = new HttpEntity<>(jsonObject.toString(), headers);
            restTemplate.exchange(BASE_URL + "empty", HttpMethod.GET, httpEntity, new ParameterizedTypeReference<Void>() {
            }).getBody();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public ArrayList<Vulnerability> findAll(String username, String token) {
        try {
            MultiValueMap<String, String> values = new LinkedMultiValueMap<>();
            values.add("username", username);
            values.add("token", token);
            HttpEntity<?> httpEntity = new HttpEntity<Object>(values);
            return restTemplate.exchange(BASE_URL + "findall", HttpMethod.GET, httpEntity, new ParameterizedTypeReference<ArrayList<Vulnerability>>() {
            }).getBody();
        } catch (Exception e) {
            return null;
        }
    }

    public Vulnerability find(int id) {
        try {
            return restTemplate.exchange(BASE_URL + "find/" + id, HttpMethod.GET, null, new ParameterizedTypeReference<Vulnerability>() {
            }).getBody();
        } catch (Exception e) {
            return null;
        }
    }

    public boolean create(Vulnerability vulnerability, String username, String token) {
        try {
            Map<String, String> values = new HashMap<>();
            values.put("severity", String.valueOf(vulnerability.getSeverity()));
            values.put("type", vulnerability.getType());
            values.put("targetIP", vulnerability.getTargetIP());
            values.put("port", String.valueOf(vulnerability.getPort()));
            values.put("username", username);
            values.put("token", token);
            JSONObject jsonObject = new JSONObject(values);
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<String> entity = new HttpEntity<>(jsonObject.toString(), headers);
            restTemplate.postForEntity(BASE_URL, entity, null);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public boolean delete(int id) {
        try {
            restTemplate.delete(BASE_URL + "delete/" + id);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public boolean update(Vulnerability vulnerability) {
        try {
            Map<String, String> values = new HashMap<>();
            values.put("id", String.valueOf(vulnerability.getId()));
            values.put("severity", String.valueOf(vulnerability.getSeverity()));
            values.put("type", vulnerability.getType());
            values.put("targetIP", vulnerability.getTargetIP());
            values.put("port", String.valueOf(vulnerability.getPort()));
            JSONObject jsonObject = new JSONObject(values);
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<String> entity = new HttpEntity<>(jsonObject.toString(), headers);
            restTemplate.put(BASE_URL, entity);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}
